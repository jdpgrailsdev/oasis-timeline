import com.moowork.gradle.node.npm.NpmTask

plugins {
    id "com.diffplug.spotless" version "${spotlessPluginVersion}"
    id 'com.github.node-gradle.node' version "${nodePluginVersion}"
    id 'org.ajoberstar.git-publish' version "${gitPublishPluginVersion}"
}

gitPublish {
    repoUri = 'https://github.com/jdpgrailsdev/oasis-timeline.git'
    branch = 'gh-pages'

    contents {
        from(projectDir) {
            include 'CNAME'
        }
        from(buildDir) {
            include '**.js'
            include '**.json'
            include '**.html'
            exclude 'dist/*.tar'
            exclude '__test__/**'
        }
        from("${buildDir}/favicons") {
            into 'favicons'
        }
        from("${buildDir}/fonts") {
            into 'fonts'
        }
        from("${buildDir}/images") {
            into 'images'
        }
        from("${buildDir}/sources") {
            into 'sources'
        }
        from("${buildDir}/static") {
            into 'static'
        }
        from("${buildDir}/stylesheets") {
            into 'stylesheets'
        }
    }

    commitMessage = 'Updating site.'
}

node {
    version = project['node.version']
}

spotless {
    format 'styling', {
        target 'public/stylesheets/**/*.css'
//        prettier().config(['parser': 'css', 'printWidth': 150, 'singleQuote': true, 'tabWidth': 4])
        licenseHeaderFile "${project.rootProject.projectDir}/LICENSE_HEADER", ''
    }
    typescript {
        target 'src/**/*.tsx'
//        tsfmt().config(['indentSize': 4, 'convertTabsToSpaces': true])
        licenseHeaderFile "${project.rootProject.projectDir}/LICENSE_HEADER", '(import|const|declare|export|var) '
    }
}

task install(type: NpmTask) {
    npmCommand = ['install']
}

task start(type: NpmTask) {
    npmCommand = ['run-script']
    args = ['start']
    environment = [REACT_APP_UPDATED_AT: new Date().format('EEEEE, MMMM dd, yyyy')]
}

task buildPackage(type: NpmTask, dependsOn:['clean', 'install']) {
    npmCommand = ['run-script']
    args = ['build']
    environment = [REACT_APP_UPDATED_AT: new Date().format('EEEEE, MMMM dd, yyyy')]
}

task test(type: NpmTask, dependsOn:['clean', 'install']) {
    npmCommand = ['run-script']
    args = ['test', '--', '--watchAll=false']
}

task delete(type: Delete) {
    delete buildDir
}

task archive(type: Tar, dependsOn:['build']) {
    archiveBaseName = project.name
    destinationDirectory = file("${buildDir}/dist")
    from ("$buildDir") {
        exclude 'dist/*.tar'
        exclude '__test__/**'
    }
}

task fixSpotless {
    doLast {
        ['spotless-node-modules-prettier-format', 'spotless-node-modules-tsfmt-format'].each { dir ->
            def tmpDir = new File(project.buildDir, dir)
            if (!tmpDir.exists()) {
                tmpDir.mkdirs()
            }
        }
    }
}

project.tasks.build.finalizedBy([project.tasks.archive])
project.tasks.build.dependsOn([project.tasks.test, project.tasks.buildPackage])
project.tasks.check.dependsOn([project.tasks.test])
project.tasks.clean.dependsOn([project.tasks.delete])
project.tasks.publish.dependsOn([project.tasks.build, project.tasks.gitPublishPush])
project.tasks.gitPublishPush.outputs.upToDateWhen { false }
project.tasks.spotlessCheck.dependsOn([project.tasks.fixSpotless])