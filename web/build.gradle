import com.moowork.gradle.node.yarn.YarnInstallTask
import com.moowork.gradle.node.yarn.YarnTask
import java.util.Date

plugins {
  id 'com.github.node-gradle.node' version "${nodePluginVersion}"
  id 'org.ajoberstar.git-publish' version "${gitPublishPluginVersion}"
}

gitPublish {
    repoUri = 'git@github.com:jdpgrailsdev/oasis-timeline.git'
    branch = 'gh-pages'

    contents {
        from(projectDir) {
            include 'CNAME'
        }
        from(buildDir) {
            include '**.js'
            include '**.json'
            include '**.html'
            exclude "dist/*.tar"
        }
        from("${buildDir}/favicons") {
            into 'favicons'
        }
        from("${buildDir}/fonts") {
            into 'fonts'
        }
        from("${buildDir}/images") {
            into 'images'
        }
        from("${buildDir}/sources") {
            into 'sources'
        }
        from("${buildDir}/static") {
            into 'static'
        }
        from("${buildDir}/stylesheets") {
            into 'stylesheets'
        }
    }

    commitMessage = 'Updating site.'
}

node {
    version = project['node.version']
    yarnVersion = project['yarn.version']
}

task install(type: YarnInstallTask) {
    args = ['--no-optional']
}

task start(type: YarnTask) {
    args = ['start']
    environment = [REACT_APP_UPDATED_AT: new Date().format('EEEEE, MMMM dd, yyyy')]
}

task build(type: YarnTask, dependsOn:['clean', 'install']) {
    args = ['build']
    environment = [REACT_APP_UPDATED_AT: new Date().format('EEEEE, MMMM dd, yyyy')]
}

task clean(type: Delete) {
    delete "${projectDir}/package-lock.json"
    delete buildDir
}

task archive(type: Tar, dependsOn:['build']) {
    archiveBaseName = project.name
    destinationDirectory = file("${buildDir}/dist")
    from ("$buildDir") {
        exclude "dist/*.tar"
    }
}

project.tasks.build.finalizedBy([project.tasks.archive])
project.tasks.publish.dependsOn([project.tasks.build, project.tasks.gitPublishPush])
project.tasks.gitPublishPush.outputs.upToDateWhen { false }