plugins {
    id 'groovy'
    id 'jacoco'
    id 'java'
    id 'com.github.spotbugs' version '4.0.5'
    id 'com.heroku.sdk.heroku-gradle' version '1.0.4'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.2.7.RELEASE'
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
}

sourceCompatibility=11

configurations {
    agent
    intTestImplementation.extendsFrom testImplementation
    intTestRuntime.extendsFrom intTestImplementation
}

repositories {
    mavenCentral()
}

dependencies {
    agent 'com.newrelic.agent.java:newrelic-agent:5.12.0'

    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'com.newrelic.agent.java:newrelic-api:5.12.0'
    implementation 'com.newrelic.telemetry:micrometer-registry-new-relic:0.4.0'
    implementation 'io.micrometer:micrometer-core'
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework.boot:spring-boot'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.projectreactor:reactor-core'
    implementation 'org.twitter4j:twitter4j-core:4.0.7'
    implementation 'org.slf4j:slf4j-api'

    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.codehaus.groovy:groovy:3.0.2'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.2'
    testImplementation 'org.spockframework:spock-core:2.0-M2-groovy-3.0'
    testImplementation 'org.spockframework:spock-junit4:2.0-M2-groovy-3.0'

    intTestImplementation 'org.spockframework:spock-spring:2.0-M2-groovy-3.0'
}

task copyDataFile(type: Copy) {
    from "${project.rootProject.projectDir}/web/src/data"
    into 'src/main/resources/json'
    include '*.json'
    filter { line -> line
        .replaceAll('<i>', '\'')
        .replaceAll('</i>', '\'')
        .replaceAll('<[^>]*>', '') }
}

task downloadAgent {
    doLast {
        project.configurations.agent.resolvedConfiguration.firstLevelModuleDependencies.moduleArtifacts.each { artifact ->
            project.copy {
                from artifact.file
                into "${project.buildDir}/libs"
                rename 'newrelic-agent-.*\\.jar', 'newrelic-agent.jar'
            }
        }
    }
}

bootJar {
    archiveName = "${project.name}.jar"
    mainClassName = 'com.jdpgrailsdev.oasis.timeline.Application'
}

bootRun {
    // Enable commented out section for local staging debugging
    environment << [
        INSERT_API_KEY: '',
        METRICS_API_URI: 'http://localhost',
        NEW_RELIC_APP_NAME: 'oasis-timeline-autobot',
        SPRING_ACTUATOR_USERNAME: 'user',
        SPRING_ACTUATOR_PASSWORD: 'password',
        SPRING_PROFILES_ACTIVE: 'development',
        TWITTER_OAUTH_CONSUMER_KEY: '',
        TWITTER_OAUTH_CONSUMER_SECRET: '',
        TWITTER_OAUTH_ACCESS_TOKEN: '',
        TWITTER_OAUTH_ACCESS_TOKEN_SECRET: ''
    ]

    jvmArgs = [
        '-Duser.timezone=UTC'
    ]
}

clean {
    doLast {
        delete 'src/main/resources/json'
    }
}

heroku {
    appName = project.name
    jdkVersion = 11
    includeBuildDir = false
    includes = ['autobot/build/libs/*.jar']
    processTypes(
        web: ['java', '-Dserver.port=$PORT', '-Duser.timezone=UTC', '-Dnewrelic.config.distributed_tracing.enabled=true',
            '-Dnewrelic.config.span_events=true', '-Dnewrelic.environment=production', '-XX:-OmitStackTraceInFastThrow',
            '-javaagent:autobot/build/libs/newrelic-agent.jar', '-jar', "autobot/build/libs/${project.name}.jar".toString()].join(' ')
    )
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    afterEvaluate {
      classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: ['com/jdpgrailsdev/oasis/timeline/config/**', 'com/jdpgrailsdev/oasis/timeline/Application*'])
      }))
    }
}

sourceSets {
    // Note that just declaring this sourceset creates two configurations.
    intTest {
        groovy {
            srcDir file('src/intTest/groovy')
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

spotbugs {
    ignoreFailures = true
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    doFirst {
        jvmArgs = ['-Duser.timezone=UTC']
    }
}

task intTest(type:Test) {
    description = 'Run integration tests (located in src/intTest/...).'
    testClassesDirs = project.sourceSets.intTest.output.classesDirs
    classpath = project.sourceSets.intTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
    doFirst {
        environment << [
                INSERT_API_KEY: '',
                METRICS_API_URI: 'http://localhost',
                NEW_RELIC_APP_NAME: 'oasis-timeline-autobot',
                SPRING_ACTUATOR_USERNAME: 'user',
                SPRING_ACTUATOR_PASSWORD: 'password',
                SPRING_PROFILES_ACTIVE: 'test',
                TWITTER_OAUTH_CONSUMER_KEY: '',
                TWITTER_OAUTH_CONSUMER_SECRET: '',
                TWITTER_OAUTH_ACCESS_TOKEN: '',
                TWITTER_OAUTH_ACCESS_TOKEN_SECRET: ''
        ]

        jvmArgs = ['-Duser.timezone=UTC'
// Uncomment to enable remote debugging from an IDE
//         '-Xdebug',
//         "-Xrunjdwp:server=y,transport=dt_socket,address=${(project.port as int) + 1},suspend=y",
        ]

    }
    useJUnitPlatform()
}

// Task dependencies
project.tasks.processResources.dependsOn([project.tasks.copyDataFile])
assemble.dependsOn(project.tasks.downloadAgent)
project.tasks.publish.dependsOn([project.tasks.build, project.tasks.deployHeroku])
project.tasks.copyDataFile.outputs.upToDateWhen { false }
project.tasks.jacocoTestReport.outputs.upToDateWhen { false }
test.finalizedBy(project.tasks.jacocoTestReport)

// Always execute the tests -- needed for Jenkins to be happy
test.outputs.upToDateWhen { false }

/*
 * Set the integration tests to run during the check task
 * immediately after the unit tests have run.
 */
check.dependsOn intTest
intTest.mustRunAfter test

// Disable SpotBugs analysis for test code
project.tasks.spotbugsTest.enabled = false
project.tasks.spotbugsIntTest.enabled = false